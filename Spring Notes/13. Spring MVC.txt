1. redirect & forward 처리 과정
    1) redirect 
        - 클라이언트 수동으로 write.jsp 로 요청 (request)
            - GET/POST 요청 다 가능.
        - 서버에서 300번대 응답헤더(redirect)로 응답
        - 클라이언트에서 자동으로 login.jsp로 GET 요청
            - redirect 는 무조건 GET 요청으로 보냄.
        - ==> 요청 2번, 응답 2번

    2) forward
        - 클라이언트에서 수동으로 write.jsp 로 요청 (request)
            - GET/POST 요청 다 가능.
        - write.jsp 에서 login.jsp로 request, response를 저장하고 전달.
        -login.jsp 에서 클라이언트로 응답
        - - ==> 요청 1번, 응답 2번

2. @RequestMapping 의 URL 패턴 종류 
    ( 우선순위 1 -> 2 -> 3 )
    1) 정확히 일치(exact mapping)           /login/ezen.do      http://localhost/ezenred/login/ezen.do

    2) 경로 매핑(path mapping)              /login/* (전부)     http://localhost/ezenred/login/
                                                               http://localhost/ezenred/login/hello
                                                               http://localhost/ezenred/login/hello.do
                                                               http://localhost/ezenred/login/test/

    3) 확장자 매핑 (extension mapping)      *.do                http://localhost/ezenred/login/hi.do
                                        [확장자만 맞으면 전부]   http://localhost/ezenred/singup/hello.do


    ?는 한글자, *는 여러 글자, **는 하위 경로포함

3. Filter
    1) 공통적인 요청 전처리 & 응답 후처리에 사용
    2) 로깅, 인코딩(변환) 등.
    3) 중복코드 분리
    4) DispatcherServlet , AOP 와 비슷
    5) 필터 1개 처리 순서
        - ⓵ 요청을 받으면 Filter에서 전처리
        - ⓶ 서블릿 호출
        - ⓷ 서블릿에서 처리
        - ⓸ Filter에서 후처리를 하고 응답

















