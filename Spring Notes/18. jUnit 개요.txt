1. jUnit
    1) 의미 : java 에서 독립된 단위테스트(Unit Test)를 지원해주는 프레임워크
    2) 단위테스트를 쉽게 해주는 테스트 지원 프레임워크

2. 단위테스트(Unit Test)
    1) 소스 코드의 특정 모듈이 의도된 대로 정확히 작동하는지 검증하는 절차
    2) 모든 함수와 메소드에 대한 테스트 케이스(Test case)를 작성하는 절차

3. jUnit 특징
    1) TDD 
    2) 단정(assert) 메서드로 테스트 케이스의 수행 결과를 판별함
    3) 어노테이션 제공 (@Test)
        - 새로운 인스턴스를 생성하여 독립적인 테스트가 이루어짐

4. jUnit 에서 테스트를 지원하는 어노테이션(Annotation)
    1) @Test
        - @Test 가 선언된 메서드는 테스트를 수행하는 메소드가 됨.
        - 각각의 테스트가 서로 영향을 주지 않고 독립적으로 실행됨을 원칙으로 함
            - @Test 마다 객체를 생성함.

5. 테스트 결과를 확인하는 단정(assert) 메서드
    1) assertTrue(a);
        - 조건 a 가 참인가를 확인함
    2) assertEquals(a, b)
        - 객체 a와 b가 일치함을 확인함
    3) assertNotNull(a)
        - 객체 a 가 Null이 아님을 확인함










※ ===================================================================================================================
        유닛 테스트
            - 프로그래밍에서 모든 함수와 메서드에 대한 테스트 케이스를 작성, 의도된대로 잘 동작하는지 검증하는 절차
            - 프로그램을 작은 다누이로 쪼개어 각 단위가 정확하게 동작하는지 검사합으로써 프로그램의 '안정성' 높임
            - System.out.println()으로 하는 번거로운 디버깅 X, 개발기간 중 대부분을 차지하는 디버깅 시간 단축

        jUnit
            - 자바 프로그래밍 언어용 유닛 테스트 프레임워크
            - 테스트 결과는 Test클래스로 개발자에게 테스트 방법 및 클래스의 History를 공유 가능
            - 단정(assert) 메서드로 테스트 케이스의 수행 결과 판별
            - 어노테이션으로 간결하게 지원

        단정 메서드 
            - assertArrayEquals(a,b)
                - 배열 A와 B가 일치하는지 확인
            - assertEquals(a,b)
                - 배열 A와 B가 같은 값을 가지는지 확인
            - assertEquals(a,b,c)
                - 객체 A와 B가 값이 일치하는지 확인
            - assertSame(a,b)
                - 객체 A와 B가 같은 객체임을 확인
            - assertTrue(a)
                - 조건 A가 참인지 확인
            - assertNotNull(a)
                - 객체 A가 null이 아님을 확인

        기본 어노테이션
            - @Test
                - 테스트를 만드는 모듈 역할
            - @DisplayName
                - 테스트 클래스 또는 테스트 메서드의 사용자 정의 표시 이름을 정의
            - @ExtendWith
                - 사용자 정의 확장명을 등록하는데 사용
            - @BeforeEach
                - 각 테스트 메서드 전에 실행됨을 나타냄
            - @AfterEach
                - 각 테스트 메서드 후에 실행됨을 나타냄
            - @BeforeAll
                - 현재 클래스의 모든 테스트 메서드 전에 실행됨을 나타냄
            - @AfterAll
                - 현재 클래스의 모든 테스트 메서드 후에 실행됨을 나타냄
            - @Disable
                - 테스트 클래스 또는 메서드를 비활성화

