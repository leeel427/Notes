1. 추상 클래스
    1) 구현 코드 없이 매서드의 선언만 있는 추상 메서드 (abstract method)를 포함한 클래스
        - 메서드 선언 (declaration) : 반환타입, 메서드 이름, 매개변수로 구성
        - 메서드 정의 (definitoin)  : 메서드 구현(implementation)과 동일한 의미 구현부(body)를 가짐
                                     ({   })
            - 예 ) public abstract void checkDownCast(ArrayList<Animal> list) ;       // 선언
                   public void checkDownCast(ArrayList<Animal> list) {}               // 구현부가 있음.
                                                                                        추상 메서드가 아님.
 
    2) abstract 예약어를 사용
    3) 추상 클래스는 new 할수 없음 (인스턴스화 할수 없음)       // 객체를 생성할수 없음(바디x)

2. 추상 클래스 구현
    1) 메서드의 구현 코드가 없으면 abstract로 선언
    2) abstract로 선언된 메서드를 가진 클래스 abstract로 선언
    3) 모든 클래스가 구현된 클래스라도 abstract로 선언되면 추상 클래스로 /인식하여/ 인스턴스화 할 수 없음.
    4) 추상 클래스의 추상 메서드는 하위 클래스가 상속하여 구현 
    5) 추상 클래스내의 추상 메서드
        - 하위 클래스가 구현해야 하는 메서드
          추상 클래스 내의 구현 된 메서드
        - 하위 클래스가 공통으로 사용하는 메서드 (필요에 따라 하위 클래스에서 재정의(Override) 함)
     
3. Template Method 패턴
    1) 템플릿 메서드 
        - 상위 클래스에서는 전체적인 흐름을 구현하고 구체적인 처리는 하위 클래스에 위임
        - 추상 메서드나 구현된 메서드를 활용하여 코드의 흐름(시나리오)을 정의하는 메서드
        - 프레임워크(flame work; 안드로이드, 스프링)에서 많이 사용되는 설계 패턴
        - 추상 클래스로 선언된 상위 클래스에서 템플릿 메서드를 활용하여 
          전체적인 흐름을 정의하고
          하위 클래스에서 다르게 구현되어야 하는 부분은 추상 메서드로 선언하여 
          하위 클래스에서 구현하도록 함.

4. 추상클래스와 템플릿 메서드 활용
    1)  Player 가 있고 이 Player 가 게임을 합니다.
        게임에서 Player 가 가지는 Level 에 따라 run(), jump(), turn() 세가지 기능을 할수 있다.
        각 레벨에 따라 가능한 기능이 다음과 같습니다.
        
        초보자 레벨 : run() 가능 (천천히 달립니다.)
        중급자 레벨 : run(), jump() 가능 (빠르게 달립니다.) (아주 높이 jump합니다.)
        고급자 레벨 : run(), jump(), turn() 가능 (매우 빠르게 달립니다.) (아주 높이 jump합니다.) (turn 합니다.)

    2)  Player 는 go() 를 하면 이 세가지 기능을 수행합니다.
        이중 할수 없는 것은 할수 없다는 메세지를 출력합니다.

    3)  Player 는 한번에 하나의 레벨 상태만을 가질 수 있습니다.
    
    4)  Player 는 play() 중에 레벨에 있는 go(int count) 라는 메서드를 호출하면 
        run() 하고 count 횟수만큼 jump() 하고 trun() 합니다.

        ****** 초급자 레벨입니다 ******
        천천히 달립니다.
        jump는 못합니다.
        turn은 못합니다.

        ****** 중급자 레벨입니다 ******
        빠르게 달립니다.
        높이 jump합니다. 
        높이 jump합니다.
        turn은 못합니다.

        ****** 고급자 레벨입니다 ******
        매우 빠르게 달립니다.
        아주 높이 jump합니다.
        아주 높이 jump합니다.
        아주 높이 jump합니다.
        turn 합니다.

* 상속이 제한되는 final
    1) 변수
        - final 변수는 상수를 의미함.
    2) 메서드
        - final 메서드는 하위 클래스에서 오버라이딩을 할 수 없음
    3) 클래스
        - final 클래스는 상속을 할 수 없음.
